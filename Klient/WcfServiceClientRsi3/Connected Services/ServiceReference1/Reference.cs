//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceClientRsi3.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMyDictionary")]
    public interface IMyDictionary {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Add", ReplyAction="http://tempuri.org/IMyDictionary/AddResponse")]
        bool Add(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Add", ReplyAction="http://tempuri.org/IMyDictionary/AddResponse")]
        System.Threading.Tasks.Task<bool> AddAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Remove", ReplyAction="http://tempuri.org/IMyDictionary/RemoveResponse")]
        bool Remove(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Remove", ReplyAction="http://tempuri.org/IMyDictionary/RemoveResponse")]
        System.Threading.Tasks.Task<bool> RemoveAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Edit", ReplyAction="http://tempuri.org/IMyDictionary/EditResponse")]
        bool Edit(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Edit", ReplyAction="http://tempuri.org/IMyDictionary/EditResponse")]
        System.Threading.Tasks.Task<bool> EditAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Find", ReplyAction="http://tempuri.org/IMyDictionary/FindResponse")]
        string Find(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/Find", ReplyAction="http://tempuri.org/IMyDictionary/FindResponse")]
        System.Threading.Tasks.Task<string> FindAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/FindByWord", ReplyAction="http://tempuri.org/IMyDictionary/FindByWordResponse")]
        string FindByWord(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/FindByWord", ReplyAction="http://tempuri.org/IMyDictionary/FindByWordResponse")]
        System.Threading.Tasks.Task<string> FindByWordAsync(string word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/PrintAll", ReplyAction="http://tempuri.org/IMyDictionary/PrintAllResponse")]
        string PrintAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyDictionary/PrintAll", ReplyAction="http://tempuri.org/IMyDictionary/PrintAllResponse")]
        System.Threading.Tasks.Task<string> PrintAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyDictionaryChannel : WcfServiceClientRsi3.ServiceReference1.IMyDictionary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyDictionaryClient : System.ServiceModel.ClientBase<WcfServiceClientRsi3.ServiceReference1.IMyDictionary>, WcfServiceClientRsi3.ServiceReference1.IMyDictionary {
        
        public MyDictionaryClient() {
        }
        
        public MyDictionaryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyDictionaryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyDictionaryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyDictionaryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Add(string key, string value) {
            return base.Channel.Add(key, value);
        }
        
        public System.Threading.Tasks.Task<bool> AddAsync(string key, string value) {
            return base.Channel.AddAsync(key, value);
        }
        
        public bool Remove(string key) {
            return base.Channel.Remove(key);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAsync(string key) {
            return base.Channel.RemoveAsync(key);
        }
        
        public bool Edit(string key, string value) {
            return base.Channel.Edit(key, value);
        }
        
        public System.Threading.Tasks.Task<bool> EditAsync(string key, string value) {
            return base.Channel.EditAsync(key, value);
        }
        
        public string Find(string key) {
            return base.Channel.Find(key);
        }
        
        public System.Threading.Tasks.Task<string> FindAsync(string key) {
            return base.Channel.FindAsync(key);
        }
        
        public string FindByWord(string word) {
            return base.Channel.FindByWord(word);
        }
        
        public System.Threading.Tasks.Task<string> FindByWordAsync(string word) {
            return base.Channel.FindByWordAsync(word);
        }
        
        public string PrintAll() {
            return base.Channel.PrintAll();
        }
        
        public System.Threading.Tasks.Task<string> PrintAllAsync() {
            return base.Channel.PrintAllAsync();
        }
    }
}
